# -*- coding: utf-8 -*-
"""Level 2:Task2_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AJri1HQ1MM2GrmzMsSP2Du8KKrvgXOvx

# Level 2: Task 2

## Import Libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Load Dataset"""

file_path ='/content/Dataset .csv'
data = pd.read_csv(file_path)

print(data.head())

"""# Analyze Cuisine Combinations"""

data['Cuisines'] = data['Cuisines'].fillna('')

cuisine_combinations = data['Cuisines'].value_counts()
print("Top 10 Most Common Cuisine Combinations:")
print(cuisine_combinations.head(10))

"""## Visualizations"""

top_combinations = cuisine_combinations.head(10)
top_combinations.plot(kind='bar', color='blue', figsize=(10, 6))
plt.title('Top 10 Most Common Cuisine Combinations')
plt.xlabel('Cuisine Combination')
plt.ylabel('Number of Restaurants')
plt.xticks(rotation=45)
plt.show()

"""## Determining Ratings for Each"""

avg_rating_per_combination = data.groupby('Cuisines')['Aggregate rating'].mean()
print("Top 10 Cuisine Combinations by Average Rating:")
print(avg_rating_per_combination.sort_values(ascending=False).head(10))

top_rated_combinations = avg_rating_per_combination.sort_values(ascending=False).head(10)
top_rated_combinations.plot(kind='bar', color='orange', figsize=(10, 6))
plt.title('Top 10 Cuisine Combinations by Average Rating')
plt.xlabel('Cuisine Combination')
plt.ylabel('Average Rating')
plt.xticks(rotation=45)
plt.show()

top_rated_combinations = avg_rating_per_combination.sort_values(ascending=False).head(10)


colors = sns.color_palette("coolwarm", len(top_rated_combinations))


plt.figure(figsize=(12, 8))
bars = plt.barh(top_rated_combinations.index, top_rated_combinations.values, color=colors)


for bar in bars:
    plt.text(bar.get_width() + 0.05, bar.get_y() + bar.get_height() / 2,
             f'{bar.get_width():.2f}', ha='left', va='center', fontsize=10)

plt.title('Top 10 Cuisine Combinations by Average Rating', fontsize=16, pad=20)
plt.xlabel('Average Rating', fontsize=12)
plt.ylabel('Cuisine Combination', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)


plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""# **Split and Analyze Individual Cuisines**"""

from itertools import chain
from collections import Counter

data['Cuisines'] = data['Cuisines'].fillna('')
all_cuisines = list(chain.from_iterable(data['Cuisines'].str.split(', ')))

cuisine_counts = Counter(all_cuisines)    # occurrences of each cuisine
print("Top 10 Individual Cuisines:")
print(cuisine_counts.most_common(10))

"""## **Average Rating for Each Cuisine**"""

cuisine_ratings = []

for index, row in data.iterrows():
    cuisines = row['Cuisines'].split(', ')
    rating = row['Aggregate rating']
    for cuisine in cuisines:
        cuisine_ratings.append((cuisine, rating))


cuisine_ratings_df = pd.DataFrame(cuisine_ratings, columns=['Cuisine', 'Rating'])

avg_rating_per_cuisine = cuisine_ratings_df.groupby('Cuisine')['Rating'].mean().sort_values(ascending=False)
print("Top 10 Cuisines by Average Rating:")
print(avg_rating_per_cuisine.head(10))

"""## **Visualizing Top Individual Cuisines by Frequency**"""

top_cuisines = pd.Series(dict(cuisine_counts)).sort_values(ascending=False).head(10)
top_cuisines.plot(kind='bar', color='purple', figsize=(10, 6))
plt.title('Top 10 Most Frequent Individual Cuisines')
plt.xlabel('Cuisine')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.show()

"""# **Correlating Cuisine's Popularity and Ratings**
Aim:- To Determine if more popular cuisines tend to have higher ratings.
"""

cuisine_summary = pd.DataFrame({
    'Frequency': pd.Series(dict(cuisine_counts)),
    'Average Rating': avg_rating_per_cuisine
}).dropna()

print(cuisine_summary.head())

plt.figure(figsize=(10, 6))
sns.scatterplot(data=cuisine_summary, x='Frequency', y='Average Rating', hue='Average Rating', palette='coolwarm')
plt.title('Cuisine Popularity vs. Average Rating')
plt.xlabel('Frequency')
plt.ylabel('Average Rating')
plt.grid(alpha=0.5)
plt.show()

"""# **Clustering**"""

cuisine_dummies = data['Cuisines'].str.get_dummies(sep=', ')
cuisine_combined = pd.concat([cuisine_dummies, data['Aggregate rating']], axis=1)

"""##**K**-Means clustering"""

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=5, random_state=0)
cuisine_combined['Cluster'] = kmeans.fit_predict(cuisine_combined.drop('Aggregate rating', axis=1))

print("Cluster Labels Assigned to Each Cuisine Combination:")
print(cuisine_combined['Cluster'].value_counts())

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
reduced_data = pca.fit_transform(cuisine_combined.drop(['Aggregate rating', 'Cluster'], axis=1))
plt.figure(figsize=(10, 6))
sns.scatterplot(x=reduced_data[:, 0], y=reduced_data[:, 1], hue=cuisine_combined['Cluster'], palette='Set1')
plt.title('Clusters of Cuisine Combinations')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()

"""# **Stastical Analysis**

**ANOVA test to see if there are significant differences in ratings**
"""

from scipy.stats import f_oneway

groups = [group['Aggregate rating'].values for _, group in cuisine_combined.groupby('Cluster')]
anova_result = f_oneway(*groups)
print("ANOVA Test Result:")
print(anova_result)

"""### **Conclusion**:- p-value < 0.05, significant differences exist between clusters.

# **Result**
"""

cuisine_summary.to_csv('Cuisine_Analysis_Extended.csv', index=True)

cuisine_combined[['Cluster', 'Aggregate rating']].to_csv('Cuisine_Clusters.csv', index=False)

cuisine_combinations.to_csv('Cuisine_Combinations_Counts.csv', index=True)

avg_rating_per_combination.to_csv('Cuisine_Combinations_Ratings.csv', index=True)
print("Results saved to 'Cuisine_Combinations_Counts.csv' and 'Cuisine_Combinations_Ratings.csv'")

from google.colab import files
files.download('Cuisine_Combinations_Counts.csv')
files.download('Cuisine_Combinations_Ratings.csv')
files.download('Cuisine_Analysis_Extended.csv')
files.download('Cuisine_Clusters.csv')